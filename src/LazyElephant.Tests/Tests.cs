namespace LazyElephant.Tests
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Text.RegularExpressions;
    using Xunit;

    public class Tests
    {
        private static readonly Regex WhitespaceReplacer = new Regex(@"\n\s+\n");

        [Theory]
        [MemberData(nameof(InlineTestData))]
        public void GeneratesCorrectResult(string input, string expected, string cSharpExpected)
        {
            var result = Generator.Generate(input, new GeneratorOptions("PostPig.DataAccess.Florp", "PostPig.DataAccess.Repositories"));

            Assert.NotNull(result.Sql);

            Assert.Equal(LineEndingSingle(expected), LineEndingSingle(result.Sql));
            Assert.Equal(LineEndingSingle(cSharpExpected), LineEndingSingle(result.Class));
        }

        [Theory]
        [MemberData(nameof(FileTestData))]
        public void GeneratesFullResult(string input, string expectedSql, string expectedClass, string expectedRepository)
        {
            var result = Generator.Generate(input, new GeneratorOptions("PostPig.DataAccess.Florp", "PostPig.DataAccess.Repositories"));

            Assert.NotNull(result.Sql);

            Assert.Equal(LineEndingSingle(expectedSql), LineEndingSingle(result.Sql));
            Assert.Equal(LineEndingSingle(expectedClass), LineEndingSingle(result.Class));
            Assert.Equal(LineEndingSingle(expectedRepository), LineEndingSingle(result.Repository));
        }

        [Fact]
        public void DogFood()
        {
            var input = @"
company.listing {
id guid pk, name string, type string null, number string,
sicCode string null,
creationDate string null,
description string null,
postcode string null, region string null, locality string null, addressLine1 string null}
company.completedCombination { id guid pk, combination string}
company.website { id guid pk, companyId guid fk company.listing(id), url string, lastVisited DateTime null
}
training.session { id int pk ag, index int, currentCompanyId guid fk company.listing(id) },
training.tagged { id guid pk, name string, url string, html string, approved bool },
company.endpoint { id guid pk, url string, company_id guid fk company.listing(id) },

company.polled { id guid pk, companyId guid fk company.listing(id) },
training.shortlist { id guid pk, endpoint_id guid, url string, status int }
";
            var result = Generator.Generate(input, new GeneratorOptions("CompanyDatabase"));

            Assert.NotNull(result.Sql);
        }

        private static string LineEndingSingle(string input)
        {
            input = input.Replace("\r\n", "\n");
            input = WhitespaceReplacer.Replace(input, "\n\n");
            return input;
        }

        public static IEnumerable<object[]> InlineTestData => new[]
        {
            new object[]
            {
                // ignores not nulls
                @"task{id guid pk nn}",
                @"CREATE TABLE public.task (
    id UUID PRIMARY KEY
);",
                @"using System;

namespace PostPig.DataAccess.Florp
{
    public class Task
    {
        public Guid Id { get; set; }
    }
}"
            },
            new object[]
            {
                @"task{id guid pk, name string uq}",
                @"CREATE TABLE public.task (
    id UUID PRIMARY KEY,
    name TEXT NOT NULL UNIQUE
);",
                @"using System;

namespace PostPig.DataAccess.Florp
{
    public class Task
    {
        public Guid Id { get; set; }

        public string Name { get; set; }
    }
}"
            },
            new object[]
            {
                @"yurkey.agent{id guid pk, count int, sector short, price DECimal null, 
IsAllowed bool}",
                @"CREATE TABLE yurkey.agent (
    id UUID PRIMARY KEY,
    count INT4 NOT NULL,
    sector INT2 NOT NULL,
    price NUMERIC,
    is_allowed BOOL NOT NULL
);",
                @"using System;

namespace PostPig.DataAccess.Florp
{
    public class Agent
    {
        public Guid Id { get; set; }

        public int Count { get; set; }

        public short Sector { get; set; }

        public decimal? Price { get; set; }

        public bool IsAllowed { get; set; }
    }
}"
            },
            new object[]
            {
                // int primary key
                @"task{id int pk}",
                @"CREATE TABLE public.task (
    id INT4 PRIMARY KEY
);",
                @"namespace PostPig.DataAccess.Florp
{
    public class Task
    {
        public int Id { get; set; }
    }
}"
            },
            new object[]
            {
                // int primary key autogenerated
                @"task{id int pk ag}",
                @"CREATE TABLE public.task (
    id SERIAL PRIMARY KEY
);",
                @"namespace PostPig.DataAccess.Florp
{
    public class Task
    {
        public int Id { get; set; }
    }
}"
            },
            new object[]
            {
                // decimal column with default
                @"task{id guid pk ag, 

temp decimal df [25.584]}",
                @"CREATE TABLE public.task (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    temp NUMERIC NOT NULL DEFAULT 25.584
);",
                @"using System;

namespace PostPig.DataAccess.Florp
{
    public class Task
    {
        public Guid Id { get; set; }

        public decimal Temp { get; set; }
    }
}"
            },
            new object[]
            {
                // int and short column with default
                @"florp.task{id guid pk ag, 
cost short df [5000],
precedence int df [6969]}",
                @"CREATE TABLE florp.task (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    cost INT2 NOT NULL DEFAULT 5000,
    precedence INT4 NOT NULL DEFAULT 6969
);",
                @"using System;

namespace PostPig.DataAccess.Florp
{
    public class Task
    {
        public Guid Id { get; set; }

        public short Cost { get; set; }

        public int Precedence { get; set; }
    }
}"
            },
        };

        public static IEnumerable<object[]> FileTestData()
        {
            var path = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "..", "..", "..", "Data");

            var directories = Directory.GetDirectories(path);

            foreach (var directory in directories)
            {
                if (directory.Contains("__"))
                {
                    continue;
                }

                var template = File.ReadAllText(Path.Combine(directory, "template.txt"));
                var sql = File.ReadAllText(Path.Combine(directory, "Sql.psql"));
                var @class = File.ReadAllText(Path.Combine(directory, "Class.cs"));
                var repository = File.ReadAllText(Path.Combine(directory, "Repository.cs"));

                yield return new object[] { template, sql, @class, repository };
            }
        }
    }
}